AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'GET,OPTIONS,PUT,DELETE'"
      AllowHeaders: "'*'"
      AllowOrigin: "'https://serverless-example.xinkuo.me'"

Parameters:
  APIDomainName:
    Type: String
    Default: api-serverless-example-us-east-1.xinkuo.me
Mappings: 
  RegionalCertificateArnMap: 
    us-east-1: 
      arn: arn:aws:acm:us-east-1:198711792892:certificate/02539496-55d0-4d48-bb04-638acb4e13ed
    us-west-1: 
      arn: arn:aws:acm:us-west-1:198711792892:certificate/3d2c608e-6d9c-4b62-ad17-9151635b5ff9
    us-west-2: 
      arn: arn:aws:acm:us-west-2:198711792892:certificate/68a17c24-3e9e-4f03-aa92-a84fcb54d17a
    ap-northeast-1: 
      arn: arn:aws:acm:ap-northeast-1:198711792892:certificate/12ddf7d2-e658-4a7b-9af9-85dda02fb9a5
    ap-northeast-2:
      arn: arn:aws:acm:ap-northeast-2:198711792892:certificate/93e68abb-6645-454b-9640-113b83fe1748
    ap-southeast-1:
      arn: arn:aws:acm:ap-southeast-1:198711792892:certificate/5699cfc4-d433-423b-aac9-f5cfe7c93e32
    eu-west-1:
      arn: arn:aws:acm:eu-west-1:198711792892:certificate/55b83369-3a24-46da-abc6-003ea9f29ff3
Resources:
  LambdaFunctionStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join: [ "", ["serverless-example-lambda-", !Ref "AWS::Region"]]
  DBRecordTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
          - AttributeName: UID
            AttributeType: S
          - AttributeName: Timestamp
            AttributeType: N
      KeySchema:
          - AttributeName: UID
            KeyType: HASH
          - AttributeName: Timestamp
            KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: ServerlessExampleTable
  PutDBRecordFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - DBRecordTable
    - LambdaFunctionStorageBucket
    Properties:
      Handler: put_dbrecord_lambda.handler
      Runtime: nodejs6.10
      CodeUri: ../backend/js
      Role: !GetAtt DDBUpdateRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DBRecordTable
          DOMAIN_NAME:
            Fn::Join: [ "", ["api-serverless-example-", !Ref "AWS::Region", ".xinkuo.me"]]
      Events:
        PutDBRecordAPI:
          Type: Api
          Properties:
            Path: /record/{uid}/{timestamp}
            Method: put
  DeleteDBRecordFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - DBRecordTable
    - LambdaFunctionStorageBucket
    Properties:
      Handler: delete_dbrecord_lambda.handler
      Runtime: nodejs6.10
      CodeUri: ../backend/js
      Role: !GetAtt DDBUpdateRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DBRecordTable
      Events:
        PutDBRecordAPI:
          Type: Api
          Properties:
            Path: /record/{uid}/{timestamp}
            Method: delete
  ListDBRecordFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - DBRecordTable
    - LambdaFunctionStorageBucket
    Properties:
      Handler: list_dbrecord_lambda.handler
      Runtime: nodejs6.10
      CodeUri: ../backend/js
      Role: !GetAtt DDBUpdateRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DBRecordTable
      Events:
        PutDBRecordAPI:
          Type: Api
          Properties:
            Path: /record/{uid}
            Method: get
  DDBUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: ServerlessDDBUpdatePolicy
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:*
                  Resource: !GetAtt DBRecordTable.Arn
                - Effect: Allow
                  Action:
                  - logs:*
                  Resource: arn:aws:logs:*:*:*
  APIGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref ServerlessRestApi
        Stage: !Ref ServerlessRestApiProdStage
      Description: Trial Plan 50 requests per day
      Quota:
        Limit: 10000
        Period: MONTH
      Throttle:
        BurstLimit: 1
        RateLimit: 1
      UsagePlanName: serverless-example-usageplan
  APICustomDomain:
    Type: AWS::ApiGateway::DomainName
    DependsOn: ServerlessRestApi
    Properties:
      DomainName: 
        Fn::Join: [ "", ["api-serverless-example-", !Ref "AWS::Region", ".xinkuo.me"]]
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !FindInMap [RegionalCertificateArnMap, !Ref "AWS::Region", "arn"]
  APIPathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APICustomDomain
    Properties:
      DomainName:
        Fn::Join: [ "", ["api-serverless-example-", !Ref "AWS::Region", ".xinkuo.me"]]
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage
